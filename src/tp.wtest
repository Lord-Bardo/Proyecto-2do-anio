import tp.*
import wollok.game.*

describe "Testeando el cursor"{
	
	//Posiciones Cartas: 34 , 269.75 , 505.5 , 741.25, 977 
	test "Si muevo el cursor a la derecha, y estaba en la 1ra posicion deberia quedar en la 2da"{
		cursor.moverDerecha()
		assert.equals(1, cursor.obtenerIndice())
	}
	test "Si muevo el cursor a la izquierda, y estaba en la 1ra posicion deberia quedar en la 5ta"{
		cursor.moverIzquierda()
		assert.equals(4, cursor.obtenerIndice())
	}
		test "Si muevo el cursor a la derecha 5 veces , y estaba en la 1ra posicion deberia quedar en la 1ra de vuelta"{
		cursor.moverDerecha()
		cursor.moverDerecha()
		cursor.moverDerecha()
		cursor.moverDerecha()
		cursor.moverDerecha()
		assert.equals(0, cursor.obtenerIndice())
	}
	
}

describe "Testeando Personaje"{
	
	const vidaEnemigo = new Vida(nro = 150)
	const staminaEnemigo= new Stamina(nro =1)
	const defensaEnemigo = new Defensa(nro = 20)
	const danioEnemigo = new Danio(nro = 30)	
	
	
	const balonesDeOro = new CartaAtaque(multiplicador=2, costo = 1 , ruta = "BalonesDeOro.png", x= 441)
	const botines = new CartaAumentoDanio(costo = 1, ruta = "Botinesf50.png", x= 221, aumento= 5)
	const hormonas = new CartaAumentoDanio(costo = 1, ruta = "Hormonas.png", x= 221, aumento= 10)
	const dibu = new CartaAumentoDefensa(costo = 2, ruta = "Dibu.png", x= 38, aumento= 10)
	const milaGod = new CartaAumentoVida(costo = 3, ruta = "MilaGod.png", x= 38,aumento= 50)
	const siestita = new CartaAumentoStamina(costo =1 , ruta ="Siestita.png",x=38, aumento =3)
	const danioBasico1 = new CartaAtaque(costo = 1 , ruta = "dañobasico.png", x= 441)
	
	
	
	const listaMessi = [balonesDeOro, danioBasico1,botines,hormonas, dibu, milaGod,siestita]
	const listaEnemigo1 = [botines]//esto va a ser un problema, o no?
	
	const messi = new Messi(listaCartas= listaMessi)
	const enemigo1 = new Personaje(vida = vidaEnemigo, danio = danioEnemigo, defensa = defensaEnemigo, ruta="Mbappe.png",listaCartas = listaEnemigo1,stamina=staminaEnemigo)
	
	const staminaAlta =new Stamina(nro =4)
	const defensaNula = new Defensa(nro= 0)
	const defensaCuarenta = new Defensa (nro = 40)
	const enemigoConDefensaNula = new Personaje(vida = vidaEnemigo, danio = danioEnemigo, defensa = defensaNula, ruta="Mbappe.png", listaCartas = listaEnemigo1,stamina=staminaEnemigo)
	const enemigoConDefensaCuarenta = new Personaje (vida = vidaEnemigo, danio = danioEnemigo, defensa = defensaCuarenta, ruta="Mbappe.png", listaCartas = listaEnemigo1,stamina=staminaEnemigo)

	test "Si messi tiene 100 de vida la consulta de su vida debe dar 500" {

		assert.equals(100, messi.consultarVida())
	}
	
	test "El enemigo1 tiene 150 de vida, la consulta deberia devolver 200"{
		assert.equals(150, enemigo1.consultarVida())
	}
	
	test "El danio de messi deberia ser de 10"{
		assert.equals(10, messi.consultarDanio())
	}
	test "La defensa del enemigo deberia ser 20"{
		assert.equals(20, enemigo1.consultarDefensa())
	}
	test "La estamina  del enemigo 1"{
		//assert.equals(2, messi.consultarStamina())
		assert.equals(1, enemigo1.consultarStamina())
	}
	
	
	test "Si messi recibeDanio(20) deberia recibir 16 de danio y quedarse con 84 de vida" {
		//(dmg* (100- defensa.valor())/100)
		messi.recibeDanio(20)
		assert.equals(84, messi.consultarVida())
		
	}
	test "Si el enemigo1 tiene 20 de defensa y recibeDanio(20) deberia recibir 16 de danio y quedarse con 134 de vida"{
		////(dmg* (100- defensa.valor())/100)
		enemigo1.recibeDanio(20)
		assert.equals(134,enemigo1.consultarVida())
		
	}
	test "Si el enemigoConDefensaNula recibeDanio(20) deberia recibir 20 de danio y quedarse con 180 de vida"{
		enemigoConDefensaNula.recibeDanio(20)
		assert.equals(130,enemigoConDefensaNula.consultarVida())
	}
	test "Si messi recibeDanio(0) no deberia perder vida, tendria que ser 500"{
		messi.recibeDanio(0)
		assert.equals(100, messi.consultarVida())
	}
	test "Si el enmigo1 recibeDanio(0) no deberia perder vida, tendria que ser 200"{
		enemigo1.recibeDanio(0)
		assert.equals(150, enemigo1.consultarVida())
	}
	
	test "Si messi ataca, el enemigo sin defensa, este recibe 10 de danio y quedar con 140 de vida" {
	
		messi.atacar(enemigoConDefensaNula)
		assert.equals(140, enemigoConDefensaNula.consultarVida())
	
	}
	test "Si messi ataca al enemigo1 teniendo 10 de danio, que tiene 20 de defensa, este enemigo deberia recibir 8 de danio y quedarse con 142 de vida"{
		////(dmg* (100- defensa.valor())/100)
		messi.atacar(enemigo1)
		assert.equals(142, enemigo1.consultarVida())
	}
	test "Si el enemigo1 tiene 30 de danio y ataca a messi que tiene 20 de defensa, este ultimo deberia quedarse con 76 de vida (recibio 24 de danio)"{
		////(dmg* (100- defensa.valor())/100)
		enemigo1.atacar(messi)
		assert.equals(76, messi.consultarVida())
	}
	test "Si el enemigoConDefensaNula recibe 200 de danio, deberia estar muerto"{
		enemigoConDefensaNula.recibeDanio(200)
		assert.equals(true, enemigoConDefensaNula.estaMuerto())
	}
	test "probando"{
	messi.asignarCartas()
	messi.juega(enemigoConDefensaCuarenta,1)
	assert.equals(144,enemigoConDefensaCuarenta.consultarVida())
	}
	
	test "Si messi juega la carta balonDeOro, atacara dos veces:
	se probara con un enemigo sin defensa y 200 de vida, debe quedar con 180 de vida; con un enemigo con 40 de defensa y 200 de vida, debe
	quedar con 188 de vida"{
	messi.asignarCartas()
	messi.juega(enemigoConDefensaNula,0)
	assert.equals(130,enemigoConDefensaNula.consultarVida())
	}
	
	test "Si messi juega la carta balonDeOro, atacara dos veces: se probara  con un enemigo con 40 de defensa y 200 de vida, debe
	quedar con 188 de vida"{
	messi.asignarCartas()
	assert.equals(40,enemigoConDefensaCuarenta.consultarDefensa())	
	messi.juega(enemigoConDefensaCuarenta,0)
	assert.equals(138,enemigoConDefensaCuarenta.consultarVida())
	assert.equals(40,enemigoConDefensaCuarenta.consultarDefensa())
		}
	/*
	 * tenes 5 de vida
perdes 7 de vida
si preguntas la vida, dice 0
recuperas 1 de vida
si preguntas la vida, sigue diciendo 0
	 */
	test "Si messi recibe 740 de danio y luego recupera 10 de vida deberia tener 0 de vida"{
		messi.recibeDanio(740)
		assert.equals(0,messi.consultarVida())
		
	}
	
	
	test "Se agarra las primeras 5 cartas de la lista de cartas de  messi"{
	messi.asignarMano()
	assert.equals([balonesDeOro, danioBasico1,botines,hormonas, dibu],messi.mano())
	}
	
	test "Si incremento la stamina de messi que tiene 2, deberia quedar en 3"{
		messi.incrementarStamina()
		assert.equals(3, messi.consultarStamina())
	}
	test "Si incremento 5 veces la stamina del enemigoSinDefensa que tiene 4, deberia quedar en 6 "{
		enemigoConDefensaNula.incrementarStamina()
		enemigoConDefensaNula.incrementarStamina()
		enemigoConDefensaNula.incrementarStamina()
		enemigoConDefensaNula.incrementarStamina()
		enemigoConDefensaNula.incrementarStamina()
		
		assert.equals(6, enemigoConDefensaNula.consultarStamina())
	}
	/*
	 * method sePuedeJugar(carta){
		return	carta.consultarCosto() <= stamina.valor()
	}
	
	 */
	test "messi puede jugar cualquier carta de coste 1, x que tiene 2 de stamina"{
		
		assert.equals(true,messi.sePuedeJugar(balonesDeOro))
	}
	test "La estamina de messi es 2 no?"{
		assert.equals(2,messi.consultarStamina())
	}
	test "messi no puede jugar la carta milaGod porque cuesta 3 y tiene 2 de stamina"{
		assert.equals(false,messi.sePuedeJugar(milaGod))
	}

	
	
	
}
describe "Testeando Menu"{
	const menuPrueba = new Menu() //ya crea todas las variables el menu
	
	const messiMenu = menuPrueba.devolverMessi()
	const vanGalMenu = menuPrueba.devolverEnemigoActual()
	
	
	
	test "Al inicializar el menu deberian estar en pantalla los atributos de messi"{
		menuPrueba.iniciarMenu()
		assert.equals(true, game.hasVisual(messiMenu.devolverVida()))
		assert.equals(true, game.hasVisual(messiMenu.devolverStamina()))
		assert.equals(true, game.hasVisual(messiMenu.devolverDefensa()))
		assert.equals(true, game.hasVisual(messiMenu.devolverDanio()))
	}
	test "Al iniciar el menu deberia aparecer el cursor en pantalla"{
		menuPrueba.iniciarMenu()
		assert.equals(true, game.hasVisual(cursor))
	}
	test "Al iniciar el menu deberia aparecer las estadisticas del enemigo actual (Van Gaal)"{
		menuPrueba.iniciarMenu()
		assert.equals(true, game.hasVisual(vanGalMenu.devolverVida()))
		assert.equals(true, game.hasVisual(vanGalMenu.devolverStamina()))
		assert.equals(true, game.hasVisual(vanGalMenu.devolverDefensa()))
		assert.equals(true, game.hasVisual(vanGalMenu.devolverDanio()))
	}
	test "La funcion dondeVoy me deberia devolver 38 , 273.75 , 509.5 , 745.25, 981 respectivo para cada nro del 0 al 4"{
		
		assert.equals(38, messiMenu.dondeVoy(0))
		assert.equals(273.75, messiMenu.dondeVoy(1))
		assert.equals(509.5, messiMenu.dondeVoy(2))
		assert.equals(745.25, messiMenu.dondeVoy(3))
		assert.equals(981, messiMenu.dondeVoy(4))
		
	}
	test "Al iniciar el menu, deberian mostrarse en pantalla todas las cartas de la mano de messi"{
		menuPrueba.iniciarMenu()
		assert.equals(true, game.hasVisual(messiMenu.mano().get(0)))
		assert.equals(true, game.hasVisual(messiMenu.mano().get(1)))
		assert.equals(true, game.hasVisual(messiMenu.mano().get(2)))
		assert.equals(true, game.hasVisual(messiMenu.mano().get(3)))
		assert.equals(true, game.hasVisual(messiMenu.mano().get(4)))
	}

	
	test "Si el usuario selecciona la 1ra carta, se ejecuta messi.jugar(enemigo1,0) y deberian pasar las siguientes cosas:
			-	La stamina de messi queda en 1 
			-	La carta no deberia estar mas en pantalla
			-	La carta no deberia estar mas en la mano
			-	La carta deberia pasar a estar ultima en el mazo
			-	Se efectua el efecto de la carta, le hace 6 de daño a Van Gaal que queda con 104 de vida"{
			//danio messi 10 ,defensa mbapee 20, calculo 10*((100-20)/100)
			menuPrueba.iniciarMenu()
			assert.equals(10,messiMenu.consultarDanio())
			const c= messiMenu.mano().get(0)
			messiMenu.juega(vanGalMenu,0)
			assert.equals(true, messiMenu.mazo().contains(c))
			assert.equals(c, messiMenu.mazo().last())
			assert.equals(false, messiMenu.mano().contains(c))
			assert.equals(1, messiMenu.consultarStamina())
			assert.equals(false, game.hasVisual(c))
			assert.equals(104, vanGalMenu.consultarVida())
		
		}

	
}
	

	



	
	


	



