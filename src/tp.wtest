import tp.*
import wollok.game.*

describe "Testeando el cursor"{
	
	//Posiciones Cartas: 34 , 269.75 , 505.5 , 741.25, 977 
	test "Si muevo el cursor a la derecha, y estaba en la 1ra posicion deberia quedar en la 2da"{
		cursor.moverDerecha()
		assert.equals(1, cursor.obtenerIndice())
	}
	test "Si muevo el cursor a la izquierda, y estaba en la 1ra posicion deberia quedar en la 5ta"{
		cursor.moverIzquierda()
		assert.equals(4, cursor.obtenerIndice())
	}
		test "Si muevo el cursor a la derecha 5 veces , y estaba en la 1ra posicion deberia quedar en la 1ra de vuelta"{
		cursor.moverDerecha()
		cursor.moverDerecha()
		cursor.moverDerecha()
		cursor.moverDerecha()
		cursor.moverDerecha()
		assert.equals(0, cursor.obtenerIndice())
	}
	
}

describe "Testeando Personaje"{
	
	const vidaEnemigo = new Atributo(nro = 200, x= 700,y = 577, imagen ="BarritaVida.png")
	const staminaEnemigo= new Atributo(nro =1,x= 900, y=600, imagen="stamina.png")
	const defensaEnemigo = new Atributo(nro = 20, x= 900, y= 500, imagen ="defensa.png")
	const danioEnemigo = new Atributo(nro = 30, x=900 , y= 400, imagen ="ataque.png")	
	
	
	const vidaMessi = new Atributo(nro = 500, x= 325,y = 577, imagen ="BarritaVida.png")
	const staminaMessi= new Atributo(nro = 2, x= 270, y=600, imagen= "stamina.png")
	const defensaMessi = new Atributo(nro = 30, x= 270, y= 500, imagen ="defensa.png")
	const danioMessi = new Atributo(nro = 30, x=270 , y= 400, imagen ="ataque.png") 
	
	const balonesDeOro = new CartaAtaque(costo = 1 , ruta = "BalonesDeOro.png", x= 441)
	const botines = new CartaAumento(costo = 1, ruta = "Botinesf50.png", x= 221, aumento= 5, atributo ="danio")
	const hormonas = new CartaAumento(costo = 1, ruta = "Hormonas.png", x= 221, aumento= 10,atributo= "danio")
	const dibu = new CartaAumento(costo = 2, ruta = "Dibu.png", x= 38, aumento= 10,atributo= "defensa")
	const milaGod = new CartaAumento(costo = 3, ruta = "MilaGod.png", x= 38,aumento= 50,atributo= "vida")
	const siestita = new CartaAumento(costo =1 , ruta ="Siestita.png",x=38, aumento =3, atributo ="stamina")
	
	
	
	const listaMessi = [balonesDeOro, botines,hormonas, dibu, milaGod,siestita]
	const listaEnemigo1 = [botines]//esto va a ser un problema, o no?
	
	const messi = new Personaje(vida=vidaMessi, danio = danioMessi, defensa= defensaMessi, ruta = "Messi.png",x=360, y=423, listaCartas= listaMessi,stamina=staminaMessi)
	const enemigo1 = new Personaje(vida = vidaEnemigo, danio = danioEnemigo, defensa = defensaEnemigo, ruta="Mbappe.png",x=740,y=420, listaCartas = listaEnemigo1,stamina=staminaEnemigo)
	
	const staminaAlta =new Atributo(nro =4,x= 900, y=600, imagen="stamina.png")
	const defensaNula = new Atributo(nro= 0,x= 900, y= 500, imagen ="defensa.png" )
	const enemigoConDefensaNula = new Personaje(vida = vidaEnemigo, danio = danioEnemigo, defensa = defensaNula, ruta="Mbappe.png",x=740,y=420, listaCartas = listaEnemigo1,stamina=staminaEnemigo)
	

	test "Si messi tiene 500 de vida la consulta de su vida debe dar 500" {

		assert.equals(500, messi.consultarVida())
	}
	
	test "El enemigo1 tiene 200 de vida, la consulta deberia devolver 200"{
		assert.equals(200, enemigo1.consultarVida())
	}
	
	test "El danio de messi deberia ser de 30"{
		assert.equals(30, messi.consultarDanio())
	}
	test "La defensa del enemigo deberia ser 20"{
		assert.equals(20, enemigo1.consultarDefensa())
	}
	test "La estamina  del enemigo 1"{
		//assert.equals(2, messi.consultarStamina())
		assert.equals(1, enemigo1.consultarStamina())
	}
	
	
	test "Si messi recibeDanio(20) deberia recibir 14 de danio y quedarse con 486 de vida" {
		//(dmg* (100- defensa.valor())/100)
		messi.recibeDanio(20)
		assert.equals(486, messi.consultarVida())
		
	}
	test "Si el enemigo1 tiene 20 de defensa y recibeDanio(20) deberia recibir 16 de danio y quedarse con 184 de vida"{
		////(dmg* (100- defensa.valor())/100)
		enemigo1.recibeDanio(20)
		assert.equals(184,enemigo1.consultarVida())
		
	}
	test "Si el enemigoConDefensaNula recibeDanio(20) deberia recibir 20 de danio y quedarse con 180 de vida"{
		enemigoConDefensaNula.recibeDanio(20)
		assert.equals(180,enemigoConDefensaNula.consultarVida())
	}
	test "Si messi recibeDanio(0) no deberia perder vida, tendria que ser 500"{
		messi.recibeDanio(0)
		assert.equals(500, messi.consultarVida())
	}
	test "Si el enmigo1 recibeDanio(0) no deberia perder vida, tendria que ser 200"{
		enemigo1.recibeDanio(0)
		assert.equals(200, enemigo1.consultarVida())
	}
	
	test "Si messi ataca, el enemigo sin defensa, este recibe 30 de danio y quedar con 170 de vida" {
	
		messi.atacar(enemigoConDefensaNula)
		assert.equals(170, enemigoConDefensaNula.consultarVida())
	
	}
	test "Si messi ataca al enemigo1 teniendo 30 de danio, que tiene 20 de defensa, este enemigo deberia recibir 24 de danio y quedarse con 176 de vida"{
		////(dmg* (100- defensa.valor())/100)
		messi.atacar(enemigo1)
		assert.equals(176, enemigo1.consultarVida())
	}
	test "Si el enemigo1 tiene 30 de danio y ataca a messi que tiene 30 de defensa, este ultimo deberia quedarse con 479 de vida (recibio 21 de danio)"{
		////(dmg* (100- defensa.valor())/100)
		enemigo1.atacar(messi)
		assert.equals(479, messi.consultarVida())
	}
	test "Si el enemigoConDefensaNula recibe 200 de danio, deberia estar muerto"{
		enemigoConDefensaNula.recibeDanio(200)
		assert.equals(true, enemigoConDefensaNula.estaMuerto())
	}
	
	test "Se agarra las primeras 5 cartas de la lista de cartas de  messi"{
	messi.asignarMano()
	assert.equals([balonesDeOro, botines,hormonas, dibu, milaGod],messi.mano())
	}
	
	test "Si incremento la stamina de messi que tiene 2, deberia quedar en 3"{
		messi.incrementarStamina()
		assert.equals(3, messi.consultarStamina())
	}
	test "Si incremento 5 veces la stamina del enemigoSinDefensa que tiene 4, deberia quedar en 6 "{
		enemigoConDefensaNula.incrementarStamina()
		enemigoConDefensaNula.incrementarStamina()
		enemigoConDefensaNula.incrementarStamina()
		enemigoConDefensaNula.incrementarStamina()
		enemigoConDefensaNula.incrementarStamina()
		
		assert.equals(6, enemigoConDefensaNula.consultarStamina())
	}
	/*
	 * method sePuedeJugar(carta){
		return	carta.consultarCosto() <= stamina.valor()
	}
	
	 */
	test "messi puede jugar cualquier carta de coste 1, x que tiene 2 de stamina"{
		
		assert.equals(true,messi.sePuedeJugar(balonesDeOro))
	}
	test "La estamina de messi es 2 no?"{
		assert.equals(2,messi.consultarStamina())
	}
	test "messi no puede jugar la carta milaGod porque cuesta 3 y tiene 2 de stamina"{
		assert.equals(false,messi.sePuedeJugar(milaGod))
	}

	
	
	
}
describe "Testeando Menu"{
	const menuPrueba = new Menu() //ya crea todas las variables el menu
	
	const messiMenu = menuPrueba.devolverMessi()
	const mbapeMenu = menuPrueba.devolverEnemigoActual()
	
	
	
	test "Al inicializar el menu deberian estar en pantalla los atributos de messi"{
		menuPrueba.iniciarMenu()
		assert.equals(true, game.hasVisual(messiMenu.devolverVida()))
		assert.equals(true, game.hasVisual(messiMenu.devolverStamina()))
		assert.equals(true, game.hasVisual(messiMenu.devolverDefensa()))
		assert.equals(true, game.hasVisual(messiMenu.devolverDanio()))
	}
	test "Al iniciar el menu deberia aparecer el cursor en pantalla"{
		menuPrueba.iniciarMenu()
		assert.equals(true, game.hasVisual(cursor))
	}
	test "Al iniciar el menu deberia aparecer las estadisticas del enemigo actual (mbapee)"{
		menuPrueba.iniciarMenu()
		assert.equals(true, game.hasVisual(mbapeMenu.devolverVida()))
		assert.equals(true, game.hasVisual(mbapeMenu.devolverStamina()))
		assert.equals(true, game.hasVisual(mbapeMenu.devolverDefensa()))
		assert.equals(true, game.hasVisual(mbapeMenu.devolverDanio()))
	}
	test "La funcion dondeVoy me deberia devolver 38 , 273.75 , 509.5 , 745.25, 981 respectivo para cada nro del 0 al 4"{
		
		assert.equals(38, menuPrueba.dondeVoy(0))
		assert.equals(273.75, menuPrueba.dondeVoy(1))
		assert.equals(509.5, menuPrueba.dondeVoy(2))
		assert.equals(745.25, menuPrueba.dondeVoy(3))
		assert.equals(981, menuPrueba.dondeVoy(4))
		
	}
	test "Al iniciar el menu, deberian mostrarse en pantalla todas las cartas de la mano de messi"{
		menuPrueba.iniciarMenu()
		assert.equals(true, game.hasVisual(messiMenu.mano().get(0)))
		assert.equals(true, game.hasVisual(messiMenu.mano().get(1)))
		assert.equals(true, game.hasVisual(messiMenu.mano().get(2)))
		assert.equals(true, game.hasVisual(messiMenu.mano().get(3)))
		assert.equals(true, game.hasVisual(messiMenu.mano().get(4)))
	}
	test "Al iniciar el menu, la 1ra carta de la mano deberia estar en (38,15)"{ //anda raro esto, sera por el tamaÃ±o de las cartas que hay que cambiar ?
		const posicion = game.at(38,15) 
		menuPrueba.iniciarMenu()
		assert.equals(messiMenu.mano().get(0), game.getObjectsIn(posicion).get(0))
	}
	test "Curiosidad: Pruebo a ver si alguna de las cartas en pantalla es la que pienso"{ //que raro esto che, consultar
		const posicion = game.at(38,15) 
		menuPrueba.iniciarMenu()
		//assert.equals(messiMenu.mano().get(0), game.getObjectsIn(posicion).get(0))
		assert.equals(true, messiMenu.mano().any({x =>x == game.getObjectsIn(posicion)}))
	}
		/*
	 * method juega (enemigo, indice){
		var c = mano.get(indice) l
		if (self.sePuedeJugar(c)){l
			c.hacerEfecto(self,enemigo)
			mazo.add(c)
			mano.remove(c)
			game.removeVisual(c)
			self.restarStamina(c.consultarCosto())
		
		} else { game.say(c,"No me podes jugar te falta mana")
		}
	 */
	
	test "Si el usuario selecciona la 1ra carta, se ejecuta messi.jugar(enemigo1,0) y deberian pasar las siguientes cosas:
			-	La stamina de messi queda en 1 
			-	La carta no deberia estar mas en pantalla
			-	La carta no deberia estar mas en la mano
			-	La carta deberia pasar a estar ultima en el mazo
			-	Se efectua el efecto de la carta, le hace 210 de daÃ±o a mbapee que queda con 290 de vida"{
			//danio messi 300 ,defensa mbapee 30, calculo 300*((100-30)/100)
			menuPrueba.iniciarMenu()
			
			const c= messiMenu.mano().get(0)
			messiMenu.juega(mbapeMenu,0)
			assert.equals(290, mbapeMenu.consultarVida())
			assert.equals(true, messiMenu.mazo().contains(c))
			assert.equals(c, messiMenu.mazo().last())
			assert.equals(false, messiMenu.mano().contains(c))
			assert.equals(1, messiMenu.consultarStamina())
			assert.equals(false, game.hasVisual(c))
			
		}
	
	/*
	 * method movimiento(){
		keyboard.enter().onPressDo{self.turnoMessi()}
		
	}
	method turnoMessi(){
		if (juegaMessi){
			game.removeVisual(cursor)
			juegaMessi=false
			messi.juega(enemigo1, cursor.obtenerIndice())
			self.modificarPosicionCartas(messi.mano())
			game.schedule(3000, { self.turnoEnemigo() })
			//self.turnoEnemigo()
			self.empezarTurno()
		}
	}
	method turnoEnemigo(){
			enemigo1.juegaEnemigo(messi)	
			game.schedule(2000, {juegaMessi=true;game.addVisual(cursor)})
			//juegaMessi=true
			//game.addVisual(cursor)
			game.say(messi,"Entre en el turno enemigo")
			
	}
	 */
	
}
	

	



	
	


	



